
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'PLUS PLUSPLUS MINUS MINUSMINUS TIMES DIVIDE LESS LESSLESS LESSEQUAL GREATER GREATERGREATER GREATEREQUAL GUIONDOWN ARROW EQUALGREATER EQUAL DEQUAL DISTINT ISEQUAL SEMICOLON COMMA PLUSGREATER PLUSLESS LPAREN RPAREN LBRACKET RBRACKET LBLOCK RBLOCK COLON COMMENT DOT ANDBW ORBW XOR COMPLEMENT ORS ANDS NOTS OR AND NOT INTERROGATION ID DOLLARDOLLAR ENTERO HEXADECIMAL OCTAL CADENA CADENAA REFERENCIAS REFERENCIALISTA INCREMENTO DECREMENTO PREINDEX POSTINDEX FOR FOREACH MY WHILE LAST NEXT IF ELSE ELSIF GOTO ABS CHOP CHOWN CLOSE DEFINED DELETE DIE EOF EVAL EXEC EXIT EXP EACH FILENO FORK HEX INDEX INT JOIN KEYS LENGTH LOCAL LOG MKDIR OCT OPEN POP PRINT PUSH RAND READ RENAME REQUIRE RETURN REFERENCE RMDIR SEEK SELECT SHIFT SIN SLEEP SORT SPLIT SQRT SYSTEM SUB TELL VALUES WRITE CMP RINDEX SUBSTR PACK UNSHIFT UNTIL UNLESS USE REVERSE PESOS ARROBA PORCENTAJE EXPREGULARprogram : declaration_listdeclaration_list : declaration declaration_list\n\t\t\t\t\t\t\t| declarationdeclaration : header_declaration\n\t\t\t\t\t\t| var_declaration\n\t\t\t\t\t\t| ciclosheader_declaration : USE ID SEMICOLONheader_declaration : REQUIRE ID SEMICOLONvar_declaration : PESOS ID SEMICOLON\n\t\t\t\t\t\t| PESOS ID EQUAL E SEMICOLON\n\t\t\t\t\t\t| PESOS ID EQUAL typevar SEMICOLONvar_declaration :  ARROBA ID SEMICOLON\n\t\t\t\t\t\t\t| ARROBA ID EQUAL LPAREN lista RPAREN SEMICOLON\n\t\t\t\t\t\t\t| ARROBA ID EQUAL ARROBA ID SEMICOLONvar_declaration :  PORCENTAJE ID SEMICOLON\n\t\t\t\t\t\t\t| PORCENTAJE ID EQUAL LBLOCK lista1 RBLOCK SEMICOLON\n\t\t\t\t\t\t\t| PORCENTAJE ID EQUAL LPAREN lista2 RPAREN SEMICOLON\n\t\t\t\t\t\t\t| PORCENTAJE ID EQUAL PORCENTAJE ID SEMICOLONlista2 : typevar COMMA typevar COMMA lista2\n\t\t\t\t| typevar COMMA LPAREN lista RPAREN COMMA lista2\n\t\t\t\t| typevar COMMA LBRACKET lista RBRACKET COMMA lista2\n\t\t\t\t| typevar COMMA typevar\n\t\t\t\t| typevar COMMA LPAREN lista RPAREN\n\t\t\t\t| typevar COMMA LBRACKET lista RBRACKETlista1 : typevar EQUALGREATER typevar COMMA lista1\n\t\t\t\t| typevar EQUALGREATER LPAREN lista RPAREN COMMA lista1\n\t\t\t\t| typevar EQUALGREATER LBRACKET lista RBRACKET COMMA lista1\n\t\t\t\t| typevar EQUALGREATER typevar\n\t\t\t\t| typevar EQUALGREATER LPAREN lista RPAREN\n\t\t\t\t| typevar EQUALGREATER LBRACKET lista RBRACKETlista : typevar COMMA lista\n\t\t\t\t| typevartypevar : CADENA\n\t\t\t\t\t| CADENAA\n\t\t\t\t\t| ENTERO\n\t\t\t\t\t| OCTAL\n\t\t\t\t\t| HEXADECIMALE : E PLUS T \n\t\t\t| E MINUS T\n\t\t\t| T T : T TIMES F\n\t\t\t| T DIVIDE F\n\t\t\t| F F : PESOS ID\n\t\t\t| PESOS ID LBRACKET ENTERO RBRACKET\n\t\t\t| ENTERO\n\t\t\t| PESOS ID LBLOCK typevar RBLOCK\n\t\t\t| LPAREN E RPARENciclos : FOR LPAREN sent_for SEMICOLON cond SEMICOLON PESOS ID incdec  RPAREN LBLOCK sentencias_ciclos RBLOCK\n\t\t\t\t\t| FOREACH PESOS ID LPAREN ARROBA ID RPAREN LBLOCK sentencias_ciclos RBLOCK\n\t\t\t\t\t| WHILE LPAREN cond RPAREN LBLOCK sentencias_ciclos RBLOCK sentencias_ciclos : var_declaration sentencias_ciclos\n\t\t\t\t\t\t\t\t| ciclos sentencias_ciclos\n\t\t\t\t\t\t\t\t| var_declaration\n\t\t\t\t\t\t\t\t| ciclossent_for : PESOS ID\n\t\t\t\t\t\t| PESOS ID EQUAL ENTEROcond : typevar LESS typevar\n\t\t\t\t| typevar GREATER typevar\n\t\t\t\t| typevar ISEQUAL typevar\n\t\t\t\t| typevar LESSEQUAL typevar\n\t\t\t\t| typevar GREATEREQUAL typevar\n\t\t\t\t| typevar DEQUAL typevar\n\t\t\t\t| typevar AND typevarincdec : PLUSPLUS\n\t\t\t\t\t| MINUSMINUS'
    
_lr_action_items = {'EQUAL':([16,19,20,45,],[25,29,31,70,]),'LESS':([35,36,37,38,39,40,],[-37,61,-34,-35,-33,-36,]),'ARROBA':([0,1,4,6,8,24,26,30,31,32,34,56,72,73,92,95,109,111,112,117,121,125,130,140,156,161,163,],[10,-6,10,-4,-5,-8,-15,-9,55,-12,-7,84,-11,-10,10,-18,-14,10,10,-17,-16,-13,-51,10,-50,10,-49,]),'COMMA':([35,37,38,39,40,65,82,115,119,141,143,144,146,],[-37,-34,-35,-33,-36,93,108,132,135,151,152,153,154,]),'CADENAA':([23,29,42,44,46,54,57,58,59,60,61,62,63,93,96,104,108,114,116,118,120,132,135,151,152,153,154,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'REQUIRE':([0,1,4,6,8,24,26,30,32,34,72,73,95,109,117,121,125,130,156,163,],[2,-6,2,-4,-5,-8,-15,-9,-12,-7,-11,-10,-18,-14,-17,-16,-13,-51,-50,-49,]),'DIVIDE':([49,52,53,76,78,100,101,102,105,106,138,139,],[-43,-46,79,-46,-44,79,79,-48,-42,-41,-45,-47,]),'PORCENTAJE':([0,1,4,6,8,24,25,26,30,32,34,72,73,92,95,109,111,112,117,121,125,130,140,156,161,163,],[3,-6,3,-4,-5,-8,43,-15,-9,-12,-7,-11,-10,3,-18,-14,3,3,-17,-16,-13,-51,3,-50,3,-49,]),'FOR':([0,1,4,6,8,24,26,30,32,34,72,73,92,95,109,111,112,117,121,125,130,140,156,161,163,],[5,-6,5,-4,-5,-8,-15,-9,-12,-7,-11,-10,5,-18,-14,5,5,-17,-16,-13,-51,5,-50,5,-49,]),'LBLOCK':([25,64,78,127,155,],[44,92,104,140,161,]),'GREATER':([35,36,37,38,39,40,],[-37,57,-34,-35,-33,-36,]),'CADENA':([23,29,42,44,46,54,57,58,59,60,61,62,63,93,96,104,108,114,116,118,120,132,135,151,152,153,154,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'EQUALGREATER':([35,37,38,39,40,68,],[-37,-34,-35,-33,-36,96,]),'WHILE':([0,1,4,6,8,24,26,30,32,34,72,73,92,95,109,111,112,117,121,125,130,140,156,161,163,],[14,-6,14,-4,-5,-8,-15,-9,-12,-7,-11,-10,14,-18,-14,14,14,-17,-16,-13,-51,14,-50,14,-49,]),'SEMICOLON':([15,16,19,20,22,28,35,37,38,39,40,45,47,48,49,52,53,67,71,76,78,83,85,86,87,88,89,90,91,94,97,98,100,101,102,105,106,107,138,139,],[24,26,30,32,34,46,-37,-34,-35,-33,-36,-56,72,73,-43,-35,-40,95,99,-46,-44,109,-59,-64,-61,-63,-58,-62,-60,117,121,-57,-38,-39,-48,-42,-41,125,-45,-47,]),'PLUSPLUS':([137,],[148,]),'OCTAL':([23,29,42,44,46,54,57,58,59,60,61,62,63,93,96,104,108,114,116,118,120,132,135,151,152,153,154,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'RBLOCK':([26,30,32,35,37,38,39,40,69,72,73,95,109,111,112,113,117,119,121,124,125,128,129,130,144,145,146,150,156,159,160,162,163,],[-15,-9,-12,-37,-34,-35,-33,-36,97,-11,-10,-18,-14,-55,-54,130,-17,-28,-16,139,-13,-53,-52,-51,-29,-25,-30,156,-50,-26,-27,163,-49,]),'RPAREN':([35,37,38,39,40,41,49,53,66,76,77,78,81,82,85,86,87,88,89,90,91,100,101,102,105,106,110,115,126,131,134,138,139,141,142,143,147,148,149,157,158,],[-37,-34,-35,-33,-36,64,-43,-40,94,-46,102,-44,107,-32,-59,-64,-61,-63,-58,-62,-60,-38,-39,-48,-42,-41,127,-22,-31,141,144,-45,-47,-23,-19,-24,-66,-65,155,-20,-21,]),'ID':([2,3,9,10,13,21,27,43,51,55,84,122,],[15,16,19,20,22,33,45,67,78,83,110,137,]),'LPAREN':([5,14,25,29,31,33,50,74,75,79,80,93,96,],[18,23,42,50,54,56,50,50,50,50,50,114,118,]),'PESOS':([0,1,4,6,8,11,18,24,26,29,30,32,34,50,72,73,74,75,79,80,92,95,99,109,111,112,117,121,125,130,140,156,161,163,],[9,-6,9,-4,-5,21,27,-8,-15,51,-9,-12,-7,51,-11,-10,51,51,51,51,9,-18,122,-14,9,9,-17,-16,-13,-51,9,-50,9,-49,]),'PLUS':([48,49,52,53,76,77,78,100,101,102,105,106,138,139,],[74,-43,-46,-40,-46,74,-44,-38,-39,-48,-42,-41,-45,-47,]),'TIMES':([49,52,53,76,78,100,101,102,105,106,138,139,],[-43,-46,80,-46,-44,80,80,-48,-42,-41,-45,-47,]),'ISEQUAL':([35,36,37,38,39,40,],[-37,63,-34,-35,-33,-36,]),'MINUS':([48,49,52,53,76,77,78,100,101,102,105,106,138,139,],[75,-43,-46,-40,-46,75,-44,-38,-39,-48,-42,-41,-45,-47,]),'AND':([35,36,37,38,39,40,],[-37,58,-34,-35,-33,-36,]),'FOREACH':([0,1,4,6,8,24,26,30,32,34,72,73,92,95,109,111,112,117,121,125,130,140,156,161,163,],[11,-6,11,-4,-5,-8,-15,-9,-12,-7,-11,-10,11,-18,-14,11,11,-17,-16,-13,-51,11,-50,11,-49,]),'LBRACKET':([78,93,96,],[103,116,120,]),'HEXADECIMAL':([23,29,42,44,46,54,57,58,59,60,61,62,63,93,96,104,108,114,116,118,120,132,135,151,152,153,154,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'DEQUAL':([35,36,37,38,39,40,],[-37,60,-34,-35,-33,-36,]),'ENTERO':([23,29,42,44,46,50,54,57,58,59,60,61,62,63,70,74,75,79,80,93,96,103,104,108,114,116,118,120,132,135,151,152,153,154,],[38,52,38,38,38,76,38,38,38,38,38,38,38,38,98,76,76,76,76,38,38,123,38,38,38,38,38,38,38,38,38,38,38,38,]),'LESSEQUAL':([35,36,37,38,39,40,],[-37,59,-34,-35,-33,-36,]),'MINUSMINUS':([137,],[147,]),'$end':([1,4,6,7,8,12,17,24,26,30,32,34,72,73,95,109,117,121,125,130,156,163,],[-6,-3,-4,-1,-5,0,-2,-8,-15,-9,-12,-7,-11,-10,-18,-14,-17,-16,-13,-51,-50,-49,]),'GREATEREQUAL':([35,36,37,38,39,40,],[-37,62,-34,-35,-33,-36,]),'USE':([0,1,4,6,8,24,26,30,32,34,72,73,95,109,117,121,125,130,156,163,],[13,-6,13,-4,-5,-8,-15,-9,-12,-7,-11,-10,-18,-14,-17,-16,-13,-51,-50,-49,]),'RBRACKET':([35,37,38,39,40,82,123,126,133,136,],[-37,-34,-35,-33,-36,-32,138,-31,143,146,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'incdec':([137,],[149,]),'declaration_list':([0,4,],[7,17,]),'ciclos':([0,4,92,111,112,140,161,],[1,1,111,111,111,111,111,]),'typevar':([23,29,42,44,46,54,57,58,59,60,61,62,63,93,96,104,108,114,116,118,120,132,135,151,152,153,154,],[36,47,65,68,36,82,85,86,87,88,89,90,91,115,119,124,82,82,82,82,82,65,68,65,65,68,68,]),'cond':([23,46,],[41,71,]),'lista':([54,108,114,116,118,120,],[81,126,131,133,134,136,]),'lista2':([42,132,151,152,],[66,142,157,158,]),'lista1':([44,135,153,154,],[69,145,159,160,]),'E':([29,50,],[48,77,]),'declaration':([0,4,],[4,4,]),'header_declaration':([0,4,],[6,6,]),'sent_for':([18,],[28,]),'sentencias_ciclos':([92,111,112,140,161,],[113,128,129,150,162,]),'program':([0,],[12,]),'F':([29,50,74,75,79,80,],[49,49,49,49,105,106,]),'T':([29,50,74,75,],[53,53,100,101,]),'var_declaration':([0,4,92,111,112,140,161,],[8,8,112,112,112,112,112,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','AnalizadorSintactico.py',9),
  ('declaration_list -> declaration declaration_list','declaration_list',2,'p_declaration_list_2','AnalizadorSintactico.py',13),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_2','AnalizadorSintactico.py',14),
  ('declaration -> header_declaration','declaration',1,'p_declaration','AnalizadorSintactico.py',18),
  ('declaration -> var_declaration','declaration',1,'p_declaration','AnalizadorSintactico.py',19),
  ('declaration -> ciclos','declaration',1,'p_declaration','AnalizadorSintactico.py',20),
  ('header_declaration -> USE ID SEMICOLON','header_declaration',3,'p_header_declaration_1','AnalizadorSintactico.py',26),
  ('header_declaration -> REQUIRE ID SEMICOLON','header_declaration',3,'p_header_declaration_2','AnalizadorSintactico.py',30),
  ('var_declaration -> PESOS ID SEMICOLON','var_declaration',3,'p_var_declaration_1','AnalizadorSintactico.py',35),
  ('var_declaration -> PESOS ID EQUAL E SEMICOLON','var_declaration',5,'p_var_declaration_1','AnalizadorSintactico.py',36),
  ('var_declaration -> PESOS ID EQUAL typevar SEMICOLON','var_declaration',5,'p_var_declaration_1','AnalizadorSintactico.py',37),
  ('var_declaration -> ARROBA ID SEMICOLON','var_declaration',3,'p_var_declaration_2','AnalizadorSintactico.py',43),
  ('var_declaration -> ARROBA ID EQUAL LPAREN lista RPAREN SEMICOLON','var_declaration',7,'p_var_declaration_2','AnalizadorSintactico.py',44),
  ('var_declaration -> ARROBA ID EQUAL ARROBA ID SEMICOLON','var_declaration',6,'p_var_declaration_2','AnalizadorSintactico.py',45),
  ('var_declaration -> PORCENTAJE ID SEMICOLON','var_declaration',3,'p_var_declaration_3','AnalizadorSintactico.py',51),
  ('var_declaration -> PORCENTAJE ID EQUAL LBLOCK lista1 RBLOCK SEMICOLON','var_declaration',7,'p_var_declaration_3','AnalizadorSintactico.py',52),
  ('var_declaration -> PORCENTAJE ID EQUAL LPAREN lista2 RPAREN SEMICOLON','var_declaration',7,'p_var_declaration_3','AnalizadorSintactico.py',53),
  ('var_declaration -> PORCENTAJE ID EQUAL PORCENTAJE ID SEMICOLON','var_declaration',6,'p_var_declaration_3','AnalizadorSintactico.py',54),
  ('lista2 -> typevar COMMA typevar COMMA lista2','lista2',5,'p_lista2','AnalizadorSintactico.py',58),
  ('lista2 -> typevar COMMA LPAREN lista RPAREN COMMA lista2','lista2',7,'p_lista2','AnalizadorSintactico.py',59),
  ('lista2 -> typevar COMMA LBRACKET lista RBRACKET COMMA lista2','lista2',7,'p_lista2','AnalizadorSintactico.py',60),
  ('lista2 -> typevar COMMA typevar','lista2',3,'p_lista2','AnalizadorSintactico.py',61),
  ('lista2 -> typevar COMMA LPAREN lista RPAREN','lista2',5,'p_lista2','AnalizadorSintactico.py',62),
  ('lista2 -> typevar COMMA LBRACKET lista RBRACKET','lista2',5,'p_lista2','AnalizadorSintactico.py',63),
  ('lista1 -> typevar EQUALGREATER typevar COMMA lista1','lista1',5,'p_lista1','AnalizadorSintactico.py',67),
  ('lista1 -> typevar EQUALGREATER LPAREN lista RPAREN COMMA lista1','lista1',7,'p_lista1','AnalizadorSintactico.py',68),
  ('lista1 -> typevar EQUALGREATER LBRACKET lista RBRACKET COMMA lista1','lista1',7,'p_lista1','AnalizadorSintactico.py',69),
  ('lista1 -> typevar EQUALGREATER typevar','lista1',3,'p_lista1','AnalizadorSintactico.py',70),
  ('lista1 -> typevar EQUALGREATER LPAREN lista RPAREN','lista1',5,'p_lista1','AnalizadorSintactico.py',71),
  ('lista1 -> typevar EQUALGREATER LBRACKET lista RBRACKET','lista1',5,'p_lista1','AnalizadorSintactico.py',72),
  ('lista -> typevar COMMA lista','lista',3,'p_lista','AnalizadorSintactico.py',76),
  ('lista -> typevar','lista',1,'p_lista','AnalizadorSintactico.py',77),
  ('typevar -> CADENA','typevar',1,'p_typevar','AnalizadorSintactico.py',81),
  ('typevar -> CADENAA','typevar',1,'p_typevar','AnalizadorSintactico.py',82),
  ('typevar -> ENTERO','typevar',1,'p_typevar','AnalizadorSintactico.py',83),
  ('typevar -> OCTAL','typevar',1,'p_typevar','AnalizadorSintactico.py',84),
  ('typevar -> HEXADECIMAL','typevar',1,'p_typevar','AnalizadorSintactico.py',85),
  ('E -> E PLUS T','E',3,'p_E','AnalizadorSintactico.py',93),
  ('E -> E MINUS T','E',3,'p_E','AnalizadorSintactico.py',94),
  ('E -> T','E',1,'p_E','AnalizadorSintactico.py',95),
  ('T -> T TIMES F','T',3,'p_T','AnalizadorSintactico.py',99),
  ('T -> T DIVIDE F','T',3,'p_T','AnalizadorSintactico.py',100),
  ('T -> F','T',1,'p_T','AnalizadorSintactico.py',101),
  ('F -> PESOS ID','F',2,'p_F','AnalizadorSintactico.py',105),
  ('F -> PESOS ID LBRACKET ENTERO RBRACKET','F',5,'p_F','AnalizadorSintactico.py',106),
  ('F -> ENTERO','F',1,'p_F','AnalizadorSintactico.py',107),
  ('F -> PESOS ID LBLOCK typevar RBLOCK','F',5,'p_F','AnalizadorSintactico.py',108),
  ('F -> LPAREN E RPAREN','F',3,'p_F','AnalizadorSintactico.py',109),
  ('ciclos -> FOR LPAREN sent_for SEMICOLON cond SEMICOLON PESOS ID incdec RPAREN LBLOCK sentencias_ciclos RBLOCK','ciclos',13,'p_ciclos','AnalizadorSintactico.py',116),
  ('ciclos -> FOREACH PESOS ID LPAREN ARROBA ID RPAREN LBLOCK sentencias_ciclos RBLOCK','ciclos',10,'p_ciclos','AnalizadorSintactico.py',117),
  ('ciclos -> WHILE LPAREN cond RPAREN LBLOCK sentencias_ciclos RBLOCK','ciclos',7,'p_ciclos','AnalizadorSintactico.py',118),
  ('sentencias_ciclos -> var_declaration sentencias_ciclos','sentencias_ciclos',2,'p_sentencias_ciclos','AnalizadorSintactico.py',122),
  ('sentencias_ciclos -> ciclos sentencias_ciclos','sentencias_ciclos',2,'p_sentencias_ciclos','AnalizadorSintactico.py',123),
  ('sentencias_ciclos -> var_declaration','sentencias_ciclos',1,'p_sentencias_ciclos','AnalizadorSintactico.py',124),
  ('sentencias_ciclos -> ciclos','sentencias_ciclos',1,'p_sentencias_ciclos','AnalizadorSintactico.py',125),
  ('sent_for -> PESOS ID','sent_for',2,'p_sent_for','AnalizadorSintactico.py',129),
  ('sent_for -> PESOS ID EQUAL ENTERO','sent_for',4,'p_sent_for','AnalizadorSintactico.py',130),
  ('cond -> typevar LESS typevar','cond',3,'p_cond','AnalizadorSintactico.py',134),
  ('cond -> typevar GREATER typevar','cond',3,'p_cond','AnalizadorSintactico.py',135),
  ('cond -> typevar ISEQUAL typevar','cond',3,'p_cond','AnalizadorSintactico.py',136),
  ('cond -> typevar LESSEQUAL typevar','cond',3,'p_cond','AnalizadorSintactico.py',137),
  ('cond -> typevar GREATEREQUAL typevar','cond',3,'p_cond','AnalizadorSintactico.py',138),
  ('cond -> typevar DEQUAL typevar','cond',3,'p_cond','AnalizadorSintactico.py',139),
  ('cond -> typevar AND typevar','cond',3,'p_cond','AnalizadorSintactico.py',140),
  ('incdec -> PLUSPLUS','incdec',1,'p_incdec','AnalizadorSintactico.py',144),
  ('incdec -> MINUSMINUS','incdec',1,'p_incdec','AnalizadorSintactico.py',145),
]
